# -*- coding: utf-8 -*-
"""Astrakhantceva_Some_tasks_Python_(requirement).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DkDPt8KwuB2fRLL5BNccv-28jMTVcYbL

# Разные задачи для решения на Python (по темам)

# 2*

## Условный оператор

### Задача 6. Проверка логина и пароля

Даны два имени пользователя (bender, calculon) и пароли этих пользователей соответственно (BENDER и CALCULON).

Необходимо написать программу, принимающую от пользователя логин и пароль, проверяет их и выводит одно из следующих сообщений:

- "successful connection", если проверка прошла успешно;

- "unsuccessful connection", если проверка не прошла;

- "unknown user", если введено неизвестное программе имя пользователя.
"""

bender_login = "bender"
bender_password = "BENDER"
calculon_login = "calculon"
calculon_password = "CALCULON"
login = input("login: ")

# место для вашего кода
if login == bender_login:
    password = input("password: ")
    if password == bender_password:
        print("successful connection")
    else:
        print("unsuccessful connection")
elif login == calculon_login:
    password = input("password: ")
    if password == calculon_password:
        print("successful connection")
    else:
        print("unsuccessful connection")
else:
    print("unknown user")

"""### Тесты:

Входные данные:  
bender   
BENDER  
Выходные данные: successful connection  

Входные данные:  
calculon  
BENDER  
Выходные данные: unsuccessful connection

Входные данные:  
crushinator  
Выходные данные: unknown user

Входные данные:  
user1  
Выходные данные: unknown user

Входные данные:
calculon  
CALCULON  
Выходные данные: successful connection

## Функции. Начало

### Задача 5. Оценка за курс

Университет вычисляет итоговые оценки студентов на основе их промежуточных и итоговых экзаменационных баллов. Итоговая оценка определяется путем взятия 40% от промежуточной оценки и 60% от оценки за итоговый экзамен. Если итоговая оценка больше 60 баллов, то курс считается успешно пройденным.

Напишите функцию Python, которая принимает на вход промежуточные и итоговые экзаменационные оценки и возвращает строку  "Зачет" в случае успешного прохождения курса и "Незачет" в случае неудачного прохождения курса.

*Подсказка. Используйте только операторы if и основные арифметические операции `(+, -, *, /)`, а также определите свои собственные функции.*
"""

term_score = int(input("Введите промежуточный балл: "))
exam_score = int(input("Введите экземенационный балл: "))

def result(term, exam):

    result_value = term*0.4 + exam*0.6
    if result_value > 60:
        return "Зачет"
    else:
        return "Незачет"

result(term_score, exam_score)

"""### Тесты:

Входные данные:  
50  
70  
Выходные данные: Зачет

Входные данные:  
30  
50  
Выходные данные: Незачет

Входные данные:
40  
60  
Выходные данные: Незачет

Входные данные:  
80  
90  
Выходные данные: Зачет

Входные данные:  
70  
40  
Выходные данные: Незачет

## Строки

### Задача 3. Проверка паспорта

Известно, что номера паспортов в России состоят из 6 цифр. Допустим, что паспорта нового образца начинаются с номеров 75 и 76.

Напишите функцию, принимающую на вход номер паспорта и возвращающую "new", если передан номер паспорта нового образца, и "old", если передан номер паспорта старого образца. Также функция должна вернуть "wrong number", если передана строка, не соответствующая правилам формирования номера паспорта.

Выведите на экран результат работы функции.
"""

line = input("Введите номер паспорта: ")

# Ваш код

if len(line) == 6:
    if line.isnumeric():
        if (int(line) // 10000) == 75:
            print('new')

        elif (int(line) // 10000) == 76:
            print('new')

        else:
            print("old")
    else:
        print( "wrong number")

else:
    print( "wrong number")

"""### Тесты:

Входные данные:  
751234  
Выходные данные: new
    
Входные данные:  
551234  
Выходные данные:old
    
Входные данные:  
123asd  
Выходные данные: wrong number

Входные данные:  
7654321  
Выходные данные: wrong number
     
Входные данные:  
1245  
Выходные данные: wrong number

### Задача 9. Обращения маркетологов

Менеджер Игорь получает очень много сообщений от назойливых маркетологов. Ему стало интересно, сколько раз они обращаются к нему по имени в письмах. Помогите Игорю посчитать количество вхождений его имени в письмо, поданное на вход.

*Подсказка. Требуется посчитать именно количество вхождений имени "Игорь", без учета его всевозможных видоизменений. Но учтите, что имя может быть написано в разных регистрах.*
"""

text = input("Введите сообщение: ")
name_igor = "игорь"
# Ваш код
counter = 0;
small_text = text.lower()
sp_text = small_text.split()
for name in sp_text:
    if name_igor in name:
        counter = counter + 1
print(counter)

"""### Тесты:

Входные данные:    
некоторое письмо, Игорь  
Выходные данные: 1

Входные данные:    
вам снова письмо, Игорь. Почему вы не отвечаете, Игорь?  
Выходные данные: 2

Входные данные:  
спишь?  
Выходные данные: 0

Входные данные:  
Игорь, узнайте тайну имени Игорь всего за 100 рублей отправив смс с кодом ИГОРЬ на номер 5553535  
Выходные данные: 3

Входные данные:  
спишь? игорь???  
Выходные данные: 1

### Задача 10. Подсчёт предложений

В переменной text сохранен некоторый текст. Посчитайте количество предложений в тексте, и выведите их сумму на экран.
Если текст состоит из одного предложения, то выведите сообщение "слишком короткий текст".

*Подсказка. Количество предложений равно количеству точек.*
"""

text = input("Ведите предложения: ")

counter = text.count(".")
if counter == 1:
    print("слишком короткий текст")
else:
    print(counter)

"""### Тесты:

Входные данные:  
Я короткий текст.  
Выходные данные: слишком короткий текст
    
Входные данные:  
Я текст подлиннее, но все еще короткий текст.  
Выходные данные: слишком короткий текст
    
Входные данные:  
Я очень недлинный текст. Но я еще вырасту. Вот увидите, я вам всем покажу.  
Выходные данные: 3
    
Входные данные:  
Я-я еще расту. Не смотрите на меня. Скоро все будет. Но пока еще не готово.  
Выходные данные: 4

## Циклы

### Задача 6. Сумма целых чисел

Дано целое положительное число N. Выведите максимально возможную сумму последовательных целых чисел от 1 до n так, чтобы эта сумма была строго меньше заданного значения N.
"""

N = int(input("Введите целое число: "))
i = 0
n = 0
for n in range(N):
    i = i + n
    if i >= N:
        print(i - n)
        break

"""### Тесты:

Входные данные:  100
Выходные данные: 91

Входные данные: 1000
Выходные данные: 990

Входные данные: 10
Выходные данные: 6

Входные данные: 3
Выходные данные: 1

Входные данные: 20
Выходные данные: 15

## Массивы

### Задача 6. Главная диагональ матрицы
Вам дается целое число n. Выведите матрицу размера nxn, в которой все элементы 0, кроме главной диагонали, на которой стоят 1. (Главная диагональ квадратной матрицы состоит из элементов с индексами i и j, в которых i=j. То есть это элементы с индексами 00, 11, 22 и т.д.)
"""

n = int(input("Введите целое число"))
matrix = []

# Ваш код
for i in range(n):
    matrix.append([])
    for j in range(n):
        matrix[i].append(0)

for i in range(n):
    for j in range(n):
        if i == j:
            matrix[i][j] = 1
        else:
            matrix[i][j] = 0


#ниже этот код для проверки (не стирать)
for i in range(n):
    print(matrix[i])

"""### Тесты:

Входные данные: 5  
Выходные данные:  
[1, 0, 0, 0, 0]  
[0, 1, 0, 0, 0]  
[0, 0, 1, 0, 0]  
[0, 0, 0, 1, 0]  
[0, 0, 0, 0, 1]

Входные данные: 4  
Выходные данные:
[1, 0, 0, 0]  
[0, 1, 0, 0]  
[0, 0, 1, 0]      
[0, 0, 0, 1]

Входные данные: 1  
Выходные данные:  
[1]

Входные данные: 2  
Выходные данные:  
[1, 0]  
[0, 1]

## Словари и множества

### Задача 5. Города и страны

В словаре countries каждый ключ — это название страны, а его значения - список из 3 крупнейших городов, которые в этой стране расположены. Ваша задача написать программу, которая на вход принимает название города и сохраняет ее в переменную city, а на выходе выдает информацию о том, в какой стране находится указанный город. Если страна успешно найдена, выведите сообщение: "INFO: <указанный_город> is a city in <найденная_страна>". В противном случае: "ERROR: Country for <указанный_город> is not found"
"""

countries = {
    'Sweden': ['Stockholm', 'Goteborg', 'Malmo'],
    'Norway': ['Oslo', 'Bergen', 'Trondheim'],
    'England': ['London', 'Birmingham', 'Manchester'],
    'Germany': ['Berlin', 'Hamburg', 'Munich'],
    'France': ['Paris', 'Marseille', 'Toulouse']
}
city = input("Введите название города: ")


if city in countries['Sweden']:
    print(f"INFO: {city} is a city in Sweden")


if city in countries['Norway']:
    print(f"INFO: {city} is a city in Norway")

elif city in countries['England']:
    print(f"INFO: {city} is a city in England")

elif city in countries['Germany']:
    print(f"INFO: {city} is a city in Germany")

elif city in countries['France']:
    print(f"INFO: {city} is a city in France")

else:
    print(f"ERROR: Country for {city} is not found")

"""### Тесты:

Входные данные: Birmingham    
Выходные данные: INFO: Birmingham is a city in England

Входные данные: Moscow  
Выходные данные: ERROR: Country for Moscow is not found

Входные данные: England  
Выходные данные: ERROR: Country for England is not found

Входные данные: trondheim  
Выходные данные: ERROR: Country for trondheim is not found

Входные данные: Paris  
Выходные данные: INFO: Paris is a city in France

## Алгоритмы со строками

### Задача 1. Проверка на палиндром 1

Проверьте, является ли введенное число палиндромом. Число может быть как целочисленным, так и в виде десятичной дроби.
"""

num = input()
first_part = []
second_part = []
replace_num = num.replace('.', '')
# Ваш код
replace_num_len = len(str(replace_num))
if replace_num_len % 2 == 0:
  for i in range(int(replace_num_len / 2)):
    first_part.append(replace_num[i])
  for j in range(int(replace_num_len / 2), replace_num_len):
    second_part.append(replace_num[j])
else:
  for i in range(int(replace_num_len / 2)):
    first_part.append(replace_num[i])
  for j in range(int(replace_num_len / 2) + 1, replace_num_len):
    second_part.append(replace_num[j])

if first_part == list(reversed(second_part)):
  print(True)
else:
  print(False)
# replace_num[i]

"""### Тесты:

Входные данные: 101  
Выходные данные: True

Входные данные: 12490  
Выходные данные: False

Входные данные: 123.321  
Выходные данные: True

Входные данные: 1233.21  
Выходные данные: True

Входные данные: 123.567  
Выходные данные: False

# 3*

## Строки

### Задача 11. Акула

Ваш друг пригласил вас на плавучий остров на отдалении в 1 километр от побережья. На острове располагается огромной высоты горка для прыжков в воду, к ней ведет извилистая тернистая дорожка. Вы взбираетесь наверх, толчок, скольжение, взлет!

Во время полета с горки вы замечаете исчезающий в глубине силуэт акулы… О, нет!

В рамках задачи вам, по большому счету, нужно выяснить, кто доплывет до берега быстрее: вы или акула?

Не забывайте, что акуле нужно преодолеть бОльшее расстояние.

Если получается убежать от акулы, то нужно вывести – "Спасен от акулы!", иначе – "Акула съела пловца!".

Для удобства считаем, что события происходят в одномерном пространстве. На вход подаются 5 значений:

sharkDistance – расстояние до акулы;  
sharkSpeed – скорость акулы;  
pontoonDistance – расстояние, которое нужно проплыть обратно до острова;  
yourSpeed – ваша скорость;  
dolphin – логическая переменная, если "true", то можно уменьшить скорость акулы вдвое, так как дельфин будет её отвлекать.
"""

sharkDistance = int(input("Введите расстояние до акулы: "))
sharkSpeed = int(input("Введите скорость акулы: "))
pontoonDistance = int(input("Введите расстояние, которе нужно проплыть обратно до острова: "))
yourSpeed = int(input("Введите вашу скорость: "))
dolphin = input("Введите True или False, в засисимоти от того, будет дельфин отвлекать акулк или нет :): ")

y_time = pontoonDistance / yourSpeed

if dolphin == 'True':
    s_time = (sharkDistance + pontoonDistance) / (sharkSpeed/2)
else:
    s_time = (sharkDistance + pontoonDistance) / sharkSpeed

if y_time < s_time:
    print("Спасен от акулы!")
else:
    print("Акула съела пловца!")

"""# Тесты:

Входные данные:  
5  
1  
2  
2  
true  
Выходные данные: Спасен от акулы!

Входные данные:  
5  
7  
2  
1  
false  
Выходные данные: Акула съела пловца!

Входные данные:  
6  
3  
4  
1  
false  
Выходные данные: Акула съела пловца!

Входные данные:  
6  
3  
4  
1  
true  
Выходные данные: Спасен от акулы!

## Массивы

### Задача 11. Обратная диагональ матрицы

Мы решали задание с заполнением главной диагонали, а теперь нам предстоит сделать аналогичную вещь для обратной (побочной) диагонали.

Выведите матрицу размера nхn с такими элементами: все значения, стоящие на обратной (побочной) диагонали, равны 1, остальные - 0. (Побочная диагональ квадратной матрицы размера nхn состоит из элементов с индексами ij, в которых i+j=n-1. То есть в данном случае это элементы с индексами 04, 13, 22, 31, 40.)
"""

n = int(input("Введите целое число"))
matrix = []

# Ваш код
for i in range(n):
    matrix.append([])
    for j in range(n):
        matrix[i].append(0)

for i in range(n):
    for j in range(n):
        if i + j == n-1:
            matrix[i][j] = 1
        else:
            matrix[i][j] = 0


#ниже этот код для проверки (не стирать)
for i in range(n):
    print(matrix[i])

"""### Тесты:

Входные данные: 5  
Выходные данные:  
[0, 0, 0, 0, 1]  
[0, 0, 0, 1, 0]  
[0, 0, 1, 0, 0]  
[0, 1, 0, 0, 0]  
[1, 0, 0, 0, 0]  

Входные данные: 1  
Выходные данные:  
[1]

Входные данные: 2
Выходные данные:  
[0, 1]  
[1, 0]  

Входные данные: 3  
Выходные данные:
[0, 0, 1]  
[0, 1, 0]  
[1, 0, 0]  

"""

